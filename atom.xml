<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>傅立叶叶叶&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/6846e0d04b1e9f5376171dd36562c5da</icon>
  <subtitle>代码漫漫，上下求索</subtitle>
  <link href="https://myblog.luojunda123.top/atom.xml" rel="self"/>
  
  <link href="https://myblog.luojunda123.top/"/>
  <updated>2023-10-02T06:20:29.729Z</updated>
  <id>https://myblog.luojunda123.top/</id>
  
  <author>
    <name>傅立叶叶叶</name>
    <email>dadabad-fly@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>顺序表</title>
    <link href="https://myblog.luojunda123.top/undefined/f35acf61.html"/>
    <id>https://myblog.luojunda123.top/undefined/f35acf61.html</id>
    <published>2023-09-26T23:08:41.000Z</published>
    <updated>2023-10-02T06:20:29.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>顺序表是线性表的顺序表示，指的是用一组地址连续的存储单元依次存储线性表的数据元素。在C语言中，通常使用动态分配的一维数组来表示这种顺序存储结构。</p><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表存储空间的初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMMENT 10  <span class="comment">//线性表存储空间的分配增量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ElemType* elem;    <span class="comment">//存储空间基地址</span></span><br><span class="line">  <span class="type">int</span> length;        <span class="comment">//长度</span></span><br><span class="line">  <span class="type">int</span> listsize;      <span class="comment">//当前分配的存储容量（以sizeof(ElemType)为单位）</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><h4 id="构造一个空顺序表L"><a href="#构造一个空顺序表L" class="headerlink" title="构造一个空顺序表L"></a>构造一个空顺序表L</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitList_Sq</span><span class="params">(SqList *L)</span> &#123;</span><br><span class="line">  L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;elem) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length = <span class="number">0</span>; <span class="comment">//空表长度为0</span></span><br><span class="line">  L-&gt;listsize = LIST_INIT_SIZE; <span class="comment">//初始存储容量</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="向顺序表L手动输入n个元素"><a href="#向顺序表L手动输入n个元素" class="headerlink" title="向顺序表L手动输入n个元素"></a>向顺序表L手动输入n个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PushList_Sq</span><span class="params">(SqList *L, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始输入%d个数字\n&quot;</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)&#123;  <span class="comment">//当前存储空间已满，增加分配</span></span><br><span class="line">      ElemType* newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">      <span class="keyword">if</span> (!newbase)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">      &#125;</span><br><span class="line">      L-&gt;elem = newbase; <span class="comment">//新基址</span></span><br><span class="line">      L-&gt;listsize += LISTINCREMMENT; <span class="comment">//增加存储容量</span></span><br><span class="line">    &#125;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;L-&gt;elem[i]);<span class="comment">//输入元素 把指针L转为地址</span></span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已输入%d个数字\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中第i个位置插入新的元素e"><a href="#在顺序表L中第i个位置插入新的元素e" class="headerlink" title="在顺序表L中第i个位置插入新的元素e"></a>在顺序表L中第i个位置插入新的元素e</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_Sq</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)&#123;<span class="comment">//检测i值是否合法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入的位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)&#123;  <span class="comment">//当前存储空间已满，增加分配</span></span><br><span class="line">    ElemType* newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!newbase)&#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;elem = newbase; <span class="comment">//新基址</span></span><br><span class="line">    L-&gt;listsize += LISTINCREMMENT; <span class="comment">//增加存储容量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ElemType* q = &amp;L-&gt;elem[i - <span class="number">1</span>];<span class="comment">//q为插入位置</span></span><br><span class="line">  <span class="keyword">for</span> (ElemType* p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)&#123;<span class="comment">//插入位置以及之后的元素右移</span></span><br><span class="line">    *(p + <span class="number">1</span>) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length++;</span><br><span class="line">  *q = e;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中删除第i个元素e-并用e返回其值"><a href="#在顺序表L中删除第i个元素e-并用e返回其值" class="headerlink" title="在顺序表L中删除第i个元素e,并用e返回其值"></a>在顺序表L中删除第i个元素e,并用e返回其值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_Sq</span><span class="params">(SqList *L, <span class="type">int</span> i,ElemType *e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123; <span class="comment">//i值是否合法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ElemType* p = &amp;L-&gt;elem[i - <span class="number">1</span>];<span class="comment">//指针p指向被删除元素所在的地址</span></span><br><span class="line">  *e = *p;<span class="comment">//赋值删除元素</span></span><br><span class="line">  ElemType* q = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]);<span class="comment">//指针q指向表尾元素所在的位置</span></span><br><span class="line">  <span class="keyword">for</span> (++p; p &lt;= q; ++p)&#123; <span class="comment">//被删除元素之后的元素左移</span></span><br><span class="line">    *(p - <span class="number">1</span>) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length--;<span class="comment">//表长减1</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="返回顺序表的第i个元素"><a href="#返回顺序表的第i个元素" class="headerlink" title="返回顺序表的第i个元素"></a>返回顺序表的第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i,ElemType* e)</span>&#123; <span class="comment">//不作修改，只传入表的副本就行</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;获取位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = L.elem[i - <span class="number">1</span>]; <span class="comment">//注意是用参数接值</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="一个用于比较元素是否相等的函数，被用于表达式的布尔值判断"><a href="#一个用于比较元素是否相等的函数，被用于表达式的布尔值判断" class="headerlink" title="一个用于比较元素是否相等的函数，被用于表达式的布尔值判断"></a>一个用于比较元素是否相等的函数，被用于表达式的布尔值判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">compareElem</span><span class="params">(ElemType a, ElemType b)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">    <span class="keyword">return</span> OK; <span class="comment">//OK == 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中查找第1个与值e满足函数指针compare的元素的位序-若找到，返回其在L中的位序；否则返回0"><a href="#在顺序表L中查找第1个与值e满足函数指针compare的元素的位序-若找到，返回其在L中的位序；否则返回0" class="headerlink" title="在顺序表L中查找第1个与值e满足函数指针compare的元素的位序,若找到，返回其在L中的位序；否则返回0"></a>在顺序表L中查找第1个与值e满足函数指针compare的元素的位序,若找到，返回其在L中的位序；否则返回0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem_Sq</span><span class="params">(SqList L, ElemType e,Status (*compare) (ElemType,ElemType))</span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">//i的初值为第一个元素的位序</span></span><br><span class="line">  ElemType* p = L.elem; <span class="comment">//指针p指向第一个元素的存储位置</span></span><br><span class="line">  <span class="keyword">while</span> ((i &lt;= L.length) &amp;&amp; !(*compare)(*p++,e))++i;</span><br><span class="line">  <span class="keyword">if</span> (i &lt;= L.length)<span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc"><a href="#对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc" class="headerlink" title="对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc"></a>对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc</h4><p>时间复杂度为La和Lb两表长之和<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MergeList_Sq</span><span class="params">(SqList La, SqList Lb,SqList* Lc)</span> &#123;</span><br><span class="line">  <span class="comment">//La、Lb都是值传递，Lc是指针传递</span></span><br><span class="line">  ElemType* pa = La.elem, * pb = Lb.elem;</span><br><span class="line">  Lc-&gt;listsize = Lc-&gt;length = La.length + Lb.length;</span><br><span class="line">  ElemType* pc = Lc-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(Lc-&gt;listsize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">  <span class="keyword">if</span> (!Lc-&gt;elem)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ElemType* pa_last = La.elem + La.length - <span class="number">1</span>;<span class="comment">//La表尾元素所在的位置</span></span><br><span class="line">  ElemType* pb_last = Lb.elem + Lb.length - <span class="number">1</span>;<span class="comment">//Lb表尾元素所在的位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last)&#123;<span class="comment">//归并</span></span><br><span class="line">    <span class="keyword">if</span> (*pa &lt;= *pb)&#123;</span><br><span class="line">      *pc++ = *pa++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> *pc++ = *pb++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (pa &lt;= pa_last)*pc++ = *pa++; <span class="comment">//插入La的剩余元素</span></span><br><span class="line">  <span class="keyword">while</span> (pb &lt;= pb_last)*pc++ = *pb++; <span class="comment">//插入Lb的剩余元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="遍历顺序表L的所有元素"><a href="#遍历顺序表L的所有元素" class="headerlink" title="遍历顺序表L的所有元素"></a>遍历顺序表L的所有元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListTraverse</span><span class="params">(SqList L)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该表的长度为%d\n&quot;</span>, L.length);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该表的元素有：\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.elem[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  SqList MyList;</span><br><span class="line">  InitList_Sq(&amp;MyList); <span class="comment">//传递SqList类型的指针 必须要&amp;号表示传递指针，如果用SqList *MyList构造，传递MyList相当于把指针副本传递给函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;创建顺序表MyList的存储空间大小为%d\n&quot;</span>,MyList.listsize);</span><br><span class="line">  <span class="comment">//非常容易混淆的点，传参需要修改参数时是需要用指针传递，</span></span><br><span class="line">  <span class="comment">//但不是指针的副本传递，</span></span><br><span class="line">  <span class="comment">//同样更不是把指针的指针传递过去</span></span><br><span class="line">  <span class="comment">//&amp; 是地址或变量转指针符号</span></span><br><span class="line">  <span class="comment">//* 是地址或指针取值符号</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往MyList中放入n个数字并调用ListTraverse打印其长度和整个表的元素</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表里放几个数字？&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">PushList_Sq(&amp;MyList, num);</span><br><span class="line">ListTraverse(MyList);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往MyList的第几个位置插入什么数字最后打印</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表的第几个位置放元素?\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;需要放置的元素是?\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">ListInsert_Sq(&amp;MyList, pos, e);</span><br><span class="line">ListTraverse(MyList);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除MyList的第几个位置的元素，并打印被删除元素的值</span></span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line">e = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;需要删除顺序表的第几个元素?\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">ListDelete_Sq(&amp;MyList, pos, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;被删除的元素是：%d\n&quot;</span>, e);</span><br><span class="line">ListTraverse(MyList);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回MyList的第几个位置的元素，并打印其值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;需要返回顺序表的第几个元素?\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">GetElem(MyList, pos, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第%d位的元素是：%d\n&quot;</span>, pos,e);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试LocateElem_Sq</span></span><br><span class="line">Status(*compare)(ElemType, ElemType);</span><br><span class="line">compare = compareElem;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入需要查找的元素\n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;所找的元素%d,在表中的位置是第%d个\n&quot;</span>,e,LocateElem_Sq(MyList, e, compare));</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//新建另一个顺序表</span></span><br><span class="line">  SqList MyList2;</span><br><span class="line">  InitList_Sq(&amp;MyList2);</span><br><span class="line">  <span class="comment">//同第一步</span></span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;新建一个顺序表\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表里放几个数字？&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">  PushList_Sq(&amp;MyList2, num);</span><br><span class="line">  ListTraverse(MyList2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//再新建一个顺序表用于存储上面两个顺序表（必须非递减排序的元素）的归并</span></span><br><span class="line">  SqList MyNewList;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;这一步上面两个顺序表必须是非递减排序的，下面输出两顺序表的归并：\n&quot;</span>);</span><br><span class="line">  InitList_Sq(&amp;MyNewList);</span><br><span class="line">  MergeList_Sq(MyList, MyList2, &amp;MyNewList);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line">  ListTraverse(MyList2);</span><br><span class="line">  ListTraverse(MyNewList);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="https://myblog.luojunda123.top/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://myblog.luojunda123.top/undefined/0.html"/>
    <id>https://myblog.luojunda123.top/undefined/0.html</id>
    <published>2023-09-17T21:14:00.000Z</published>
    <updated>2023-10-02T06:20:29.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>Markdown是一种轻量级的标记语言，通过使用简单的标记符号，将纯文本转换成格式丰富的HTML文档。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p> Markdown的语法相对简单直观，通过标签来实现块级元素和行内元素的效果。<em>注意，部分标记后面需要带空格，否则不生效</em></p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>是指占据一整行或多行的元素，常用于格式化文本的结构和布局，如段落、标题、列表等。</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>通过1~6个”#”来控制标题字体的大小，并且字体自带加粗效果，如：</p><ul><li>标题「Markdown语法」用了2个#</li><li>标题「块级元素」用了3个#</li></ul><p>即#的数量越少，标题越大；越多，标题越小。</p><h4 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h4><p>在文本的前面加”&gt; “来实现，效果如下：</p><blockquote><p>这里是一个引用文本<br>~<br>~<br>~</p></blockquote><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>在文本前面加“1. ”来实现，在StackEdit编辑Markdown时换行时会自动补充序号，效果如下：</p><ol><li>起床</li><li>刷牙</li><li>洗脸</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p> 在文本前面加”- “来实现，效果如下：</p><ul><li>吃饭</li><li>睡觉</li><li>玩游戏</li></ul><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>在文本前面加”- [ ] “来实现，实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 学习C语言</span><br><span class="line">- [ ] 学习Python</span><br><span class="line">- [ ] 学习Java</span><br></pre></td></tr></table></figure><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>以3个反引号“`”开头，后面加代码语言类型，换行后写对应类型的代码，最后换行以3个反引号结尾，效果如下：</p><h5 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello Java!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxx <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> xxx <span class="keyword">having</span> <span class="built_in">count</span>(xxx) <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">order</span> <span class="keyword">by</span> xxx <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><p>在两个双”$”号之间用KaTeX语法写对应的数学公式，实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\frac&#123;\partial f&#125;&#123;\partial x&#125;=2\sqrt&#123;a&#125;x</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><h5 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h5><p>以”|”号开头和结尾，表的字段名也用”|”号分隔</p><h5 id="设置属性的对齐方式"><a href="#设置属性的对齐方式" class="headerlink" title="设置属性的对齐方式"></a>设置属性的对齐方式</h5><p>类似表头的格式，把字段名换成两个”-“号，在两个”-“号的两边通过添加”:”号来设置属性的对齐格式：</p><ul><li>只填左边表示左对齐</li><li>只填右边表示右对齐</li><li>两边都填表示居中<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5>类似表头的格式，直接填相应的属性即可<br><br>综上，设置一个姓名左对齐、性别居中、爱好右对齐的表的效果如下：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:right">爱好</th></tr></thead><tbody><tr><td style="text-align:left">张三</td><td style="text-align:center">男</td><td style="text-align:right">跑步</td></tr><tr><td style="text-align:left">狗蛋儿</td><td style="text-align:center">未知</td><td style="text-align:right">打篮球</td></tr></tbody></table></div><p>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|爱好|</span><br><span class="line">|:--|:--:|--:|</span><br><span class="line">|张三|男|跑步|</span><br><span class="line">|狗蛋儿|未知|打篮球|</span><br></pre></td></tr></table></figure></p><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>在文本后面添加<code>[^脚注名]</code>，并在段落后面换行时将所添加的符号用”:”做解释，效果如下：</p><p>一键三连<sup><a href="#fn_三连" id="reffn_三连">三连</a></sup> 的效果我们都知道，是对up主最大支持和赞赏，因此三连多多，佳作连连。</p><p>脚注的内容会自动放在文章底部，<em>注意解释之后必须换行才能继续写下一个段落，否则会被视为脚注解释内容</em></p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>以三个”-“号作为一行，其中上面的一级、二级标题和脚注解释会自动生成分割线，效果如下：</p><hr><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="直接添加"><a href="#直接添加" class="headerlink" title="直接添加"></a>直接添加</h5><p>以<code>[1](2 3)</code>的形式出现，其中</p><ul><li>1填链接的文本</li><li>2填链接</li><li>3填鼠标放在链接上的提示文本</li></ul><p>效果如下：<br><a href="https://www.baidu.com" title="百度一下，你就知道">百度</a></p><p>实现如下：<br><code>[百度](https://www.baidu.com &quot;百度一下，你就知道&quot;)</code></p><h5 id="引用添加"><a href="#引用添加" class="headerlink" title="引用添加"></a>引用添加</h5><p>以”[1][2]”和”[2]: “的形式出现，其中</p><ul><li>1填链接的文本</li><li>第一个2填自定义的id名</li><li>第二个2的空格后面填链接 提示文本 <em>注意链接和提示文本存在空格</em></li></ul><p>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度][a]</span><br><span class="line">[a]: https://www.baidu.com “百度一下，你就知道”</span><br></pre></td></tr></table></figure></p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><p>类似链接的直接添加形式，在前面加“!”号，链接改为图片的图床链接或本地连接即可实现，效果如下：<br><img src="https://www.baidu.com/img/bd_logo1.png?where=super" alt="百度" title="百度搜索logo"><br>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![百度](https://www.baidu.com/img/bd_logo1.png?where=super &quot;百度搜索logo&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>是指在一行内显示的元素，常用于格式化文本的样式，如加粗、斜体、链接等。</p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>文本两边加”*”号实现，效果如下：</p><p><em>斜体内容</em></p><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>文本两边加”**”实现，效果如下：</p><p><strong>被加粗的文字</strong></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>文本两边加反引号实现，效果如下：<br><code>print(&quot;Hello World!&quot;)</code></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>文本两边加“~~”实现，效果如下：</p><p><del>被删除的内容</del></p><h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>以”&amp;#x对应表情的字符编码;”出现在文本中，如<br><code>&amp;#x1F600;</code>表示一个笑脸&#x1F600;,其他表情的字符编码的<a href="https://www.emojiall.com/zh-hans/list">参考网站</a></p><h2 id="在Markdown中的Html代码"><a href="#在Markdown中的Html代码" class="headerlink" title="在Markdown中的Html代码"></a>在Markdown中的Html代码</h2><p>除了Markdown的基本语法，还可以使用HTML标签实现更多功能，但应当根据具体的Markdown解析器和使用场景来决定是否支持和如何解析HTML标签。</p><p>嵌入学习参考的Bilibili视频：</p><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>实现代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=327623069&amp;bvid=BV1JA411h7Gw&amp;cid=171385214&amp;p=1&amp;autoplay=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>注意src后面需要加上&amp;autoplay=0让视频不会自动播放，否则容易被吓一跳</em></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上内容基本是在参考学习的视频中学到的，包括视频嵌入代码的获取方式，文字描述枯燥，视频会更加直观易懂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Markdown简介&quot;&gt;&lt;a href=&quot;#Markdown简介&quot; c</summary>
      
    
    
    
    <category term="Markdown" scheme="https://myblog.luojunda123.top/categories/Markdown/"/>
    
    
    <category term="起点" scheme="https://myblog.luojunda123.top/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇Hexo文章</title>
    <link href="https://myblog.luojunda123.top/undefined/324eb1bd.html"/>
    <id>https://myblog.luojunda123.top/undefined/324eb1bd.html</id>
    <published>2023-09-14T21:21:49.000Z</published>
    <updated>2023-10-02T06:20:29.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="初入Hexo博客框架"><a href="#初入Hexo博客框架" class="headerlink" title="初入Hexo博客框架"></a>初入Hexo博客框架</h2><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一个快速、简洁且强大的静态博客框架。</p><p>它基于Node.js开发，使用Markdown语法来书写文章，并通过预设的模板生成静态网页。</p><p>它具有快速编译、多主题支持、插件丰富等特点，适用于个人博客、技术文档等各种静态网站的构建。</p><p>通过Hexo，用户可以轻松地管理和发布自己的网站内容，并提供了丰富的插件和主题供用户选择和使用。</p><p>与其他博客框架相比，Hexo具有简单易用、灵活可扩展等优势，被广泛应用于静态网站的搭建和维护。</p><h3 id="Hexo的使用感想"><a href="#Hexo的使用感想" class="headerlink" title="Hexo的使用感想"></a>Hexo的使用感想</h3><p>Hexo是一款是一款非常友好的面向新手的博客框架，作为一个前端小白，可以轻松理解其配置文件的含义并建立了属于自己的博客网站。</p><h3 id="Butterfly主题简介"><a href="#Butterfly主题简介" class="headerlink" title="Butterfly主题简介"></a>Butterfly主题简介</h3><p>Butterfly主题是一种开源的、响应式的博客主题。</p><p>它提供了简洁、美观的界面和丰富的功能，适用于个人博客、技术博客等多种场景。</p><p>Butterfly主题支持多种语言、主题定制、代码高亮、文章分类、标签云等功能，同时也具有快速加载和良好的用户体验。</p><p>它是Hexo博客框架的一个非常受欢迎的主题之一。</p><h3 id="Butterfly的使用感想"><a href="#Butterfly的使用感想" class="headerlink" title="Butterfly的使用感想"></a>Butterfly的使用感想</h3><p>通过Butterfly主题，博主可以自定义、美化渲染自己博客的样式，并添加各式各样的功能插件。</p><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><p>==安知鱼云== dalao的Hexo成套学习视频</p><iframe src="//player.bilibili.com/player.html?aid=556933559&bvid=BV13v4y1c75G&cid=800077849&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;初入Hexo博客框架&quot;&gt;&lt;a href=&quot;#初入Hexo博客框架&quot; c</summary>
      
    
    
    
    <category term="Hexo" scheme="https://myblog.luojunda123.top/categories/Hexo/"/>
    
    
    <category term="起点" scheme="https://myblog.luojunda123.top/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
</feed>
