<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>傅立叶叶叶&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/6846e0d04b1e9f5376171dd36562c5da</icon>
  <subtitle>代码漫漫，上下求索</subtitle>
  <link href="https://myblog.luojunda123.top/atom.xml" rel="self"/>
  
  <link href="https://myblog.luojunda123.top/"/>
  <updated>2023-10-08T16:09:22.122Z</updated>
  <id>https://myblog.luojunda123.top/</id>
  
  <author>
    <name>傅立叶叶叶</name>
    <email>dadabad-fly@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>循环队列</title>
    <link href="https://myblog.luojunda123.top/undefined/b66774c1.html"/>
    <id>https://myblog.luojunda123.top/undefined/b66774c1.html</id>
    <published>2023-10-08T23:05:54.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.  </p></blockquote><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>和顺序栈类似，顺序队列除了用一组地址连续的存储单元依次存放从队头到队尾的元素之外，还需附设两个指针front和rear分别只是队头元素及队尾元素的位置。</p><p>循环队列，则是将顺序队列臆造为一个环状的空间。为了判断循环队列的“已满”状态，规定这个空间的大小是一个定值，因此在C语言中不能用动态分配的一维数组来实现。</p><p>若用户无法预估所用的队列最大长度，则宜采用链队列。</p><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQSIZE 100;<span class="comment">//最大队列长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环队列——队列的顺序存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  QElemType *base;<span class="comment">//初始化的动态分配存储空间</span></span><br><span class="line">  <span class="type">int</span> front;<span class="comment">//头指针</span></span><br><span class="line">  <span class="type">int</span> rear;<span class="comment">//尾指针</span></span><br><span class="line">  <span class="type">int</span> size;<span class="comment">//队列的总容量</span></span><br><span class="line">  <span class="type">int</span> ElemNum;<span class="comment">//当前队列的元素个数</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个大小为len的空队列Q</span></span><br><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(SqQueue* Q, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">//清除队列Q</span></span><br><span class="line">Status <span class="title function_">ClearQueue</span><span class="params">(SqQueue* Q)</span>;</span><br><span class="line"><span class="comment">//判定队列是否为空</span></span><br><span class="line">Status <span class="title function_">QueueEmpty</span><span class="params">(SqQueue Q)</span>;</span><br><span class="line"><span class="comment">//返回队列中的元素个数，即队列的长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(SqQueue Q)</span>;</span><br><span class="line"><span class="comment">//将数组pInput中的len个元素依次插入到队列Q中</span></span><br><span class="line"><span class="comment">//返回值是成功入队的元素个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue* Q, QElemType* pInput, <span class="type">int</span> len)</span>;</span><br><span class="line"><span class="comment">//从队列Q中取出len个元素到数组pOutput中</span></span><br><span class="line"><span class="comment">//返回值是成功取出的元素个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">DeQueue</span><span class="params">(SqQueue* Q, QElemType* pOutput, <span class="type">int</span> len)</span>;</span><br></pre></td></tr></table></figure><h3 id="相关方法实现"><a href="#相关方法实现" class="headerlink" title="相关方法实现"></a>相关方法实现</h3><h4 id="InitQueue"><a href="#InitQueue" class="headerlink" title="InitQueue"></a>InitQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(SqQueue *Q, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">  Q-&gt;front = <span class="number">0</span>;</span><br><span class="line">  Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">  Q-&gt;size = len;</span><br><span class="line">  Q-&gt;ElemNum = <span class="number">0</span>;</span><br><span class="line">  Q-&gt;base = (QElemType*)<span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(QElemType));</span><br><span class="line">  <span class="keyword">if</span> (!Q-&gt;base)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ClearQueue"><a href="#ClearQueue" class="headerlink" title="ClearQueue"></a>ClearQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ClearQueue</span><span class="params">(SqQueue *Q)</span>&#123;</span><br><span class="line">  Q-&gt;front = Q-&gt;rear = Q-&gt;ElemNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueueEmpty"><a href="#QueueEmpty" class="headerlink" title="QueueEmpty"></a>QueueEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">QueueEmpty</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span> == Q.ElemNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueueLength"><a href="#QueueLength" class="headerlink" title="QueueLength"></a>QueueLength</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (Q.ElemNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnQueue"><a href="#EnQueue" class="headerlink" title="EnQueue"></a>EnQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue* Q, QElemType* pInput, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">  <span class="type">int</span> wLen = <span class="number">0</span>;<span class="comment">//待入队的元素有len个，wLen从0增加到len-1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (Q-&gt;ElemNum &lt; Q-&gt;size &amp;&amp; wLen &lt; len) &#123;<span class="comment">//队列没满且还有待入队的元素时</span></span><br><span class="line">    Q-&gt;base[Q-&gt;rear] = pInput[wLen];</span><br><span class="line">    Q-&gt;rear++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear &gt;= Q-&gt;size) &#123;<span class="comment">//入队元素溢出了</span></span><br><span class="line">      Q-&gt;rear = <span class="number">0</span>;<span class="comment">//重新循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    wLen++;</span><br><span class="line">    Q-&gt;ElemNum++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;期望入队%d个元素,实际入队%d个元素\n&quot;</span>, len, wLen);</span><br><span class="line">  <span class="keyword">return</span> wLen;<span class="comment">//返回值为0表示没有元素入队</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DeQueue"><a href="#DeQueue" class="headerlink" title="DeQueue"></a>DeQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">DeQueue</span><span class="params">(SqQueue* Q, QElemType* pOutput, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">  <span class="type">int</span> rLen = <span class="number">0</span>;<span class="comment">//期望取出的元素有len个，最终取出rLen个元素</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!QueueEmpty(*Q) &amp;&amp; rLen &lt; len) &#123;<span class="comment">//队列中还有元素且还需要取元素时</span></span><br><span class="line">    pOutput[rLen] = Q-&gt;base[Q-&gt;front];</span><br><span class="line">    Q-&gt;front++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front &gt;= Q-&gt;size) &#123;<span class="comment">//取了一圈的元素之后</span></span><br><span class="line">      Q-&gt;front = <span class="number">0</span>;<span class="comment">//从头再开始取，即循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    rLen++;</span><br><span class="line">    Q-&gt;ElemNum--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;期望出队%d个元素,实际出队%d个元素\n&quot;</span>, len, rLen);</span><br><span class="line">  <span class="keyword">return</span> rLen;<span class="comment">//返回值为0表示队列中没有元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  SqQueue Q;<span class="comment">//这里是结构体，不是指针！</span></span><br><span class="line">  QElemType arrInput[<span class="number">6</span>] = &#123; <span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">9</span>,<span class="number">-7</span> &#125;;<span class="comment">//待入队的元素组</span></span><br><span class="line">  QElemType arrOutput[<span class="number">10</span>];<span class="comment">//期望取出的元素组</span></span><br><span class="line">  InitQueue(&amp;Q, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  EnQueue(&amp;Q, arrInput, <span class="number">6</span>);</span><br><span class="line">  DeQueue(&amp;Q, arrOutput, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arrOutput[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  EnQueue(&amp;Q, arrInput, <span class="number">3</span>);</span><br><span class="line">  DeQueue(&amp;Q, arrOutput, <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arrOutput[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;循环队列&quot;&gt;&lt;a href=&quot;#循环队列&quot; class=&quot;head</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="循环队列" scheme="https://myblog.luojunda123.top/tags/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>单链队列</title>
    <link href="https://myblog.luojunda123.top/undefined/70c2e87b.html"/>
    <id>https://myblog.luojunda123.top/undefined/70c2e87b.html</id>
    <published>2023-10-08T23:05:47.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.  </p></blockquote><h2 id="单链队列"><a href="#单链队列" class="headerlink" title="单链队列"></a>单链队列</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>和栈相反，队列是一种先进先出的线性表，其只允许在表的一端进行插入元素，而在另一端删除元素。</p><p>在队列中，允许插入的一端叫做队尾，允许删除的一端叫做队头。</p><p>队列的两种存储表示:</p><ul><li>链队列 用链表表示的队列，这里只实现单链表队列.</li><li>循环队列 队列的顺序表示和实现，在【循环队列】文章中实现.</li></ul><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单链队列——队列的链式存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">  QElemType data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  QueuePtr front; <span class="comment">//队头指针</span></span><br><span class="line">  QueuePtr rear; <span class="comment">//队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个空队列Q</span></span><br><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(LinkQueue *Q)</span>; </span><br><span class="line"><span class="comment">//销毁队列Q，Q不再存在</span></span><br><span class="line">Status <span class="title function_">DestroyQueue</span><span class="params">(LinkQueue* Q)</span>; </span><br><span class="line"><span class="comment">//判断队列Q是否为空队列，为空返回TRUE，否则FALSE</span></span><br><span class="line">Status <span class="title function_">QueueEmpty</span><span class="params">(LinkQueue Q)</span>; </span><br><span class="line"><span class="comment">//返回队列Q的元素个数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(LinkQueue Q)</span>;   </span><br><span class="line"><span class="comment">//用e返回Q的队头元素</span></span><br><span class="line">Status <span class="title function_">GetHead</span><span class="params">(LinkQueue Q, QElemType *e)</span>;</span><br><span class="line"><span class="comment">//插入e为Q的新的队头元素</span></span><br><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue *Q, QElemType e)</span>; </span><br><span class="line"><span class="comment">//删除Q的队头元素，并用e返回其值</span></span><br><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span>; </span><br><span class="line"><span class="comment">//遍历队列Q中的所有元素</span></span><br><span class="line">Status <span class="title function_">QueueTraverse</span><span class="params">(LinkQueue Q)</span>;</span><br></pre></td></tr></table></figure><h3 id="相关方法实现"><a href="#相关方法实现" class="headerlink" title="相关方法实现"></a>相关方法实现</h3><h4 id="InitQueue"><a href="#InitQueue" class="headerlink" title="InitQueue"></a>InitQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(LinkQueue *Q)</span>&#123;</span><br><span class="line">  Q-&gt;front = Q-&gt;rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">  <span class="keyword">if</span> (!Q-&gt;front)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">  &#125;</span><br><span class="line">  Q-&gt;front-&gt;next = <span class="literal">NULL</span>;<span class="comment">//初始化时队头和队尾指针的next都指向空</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//InitQueue</span></span><br><span class="line">```  </span><br><span class="line">  </span><br><span class="line">#### DestroyQueue</span><br><span class="line">```c</span><br><span class="line">Status <span class="title function_">DestroyQueue</span><span class="params">(LinkQueue* Q)</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (Q-&gt;front) &#123;</span><br><span class="line">    Q-&gt;rear = Q-&gt;front-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(Q-&gt;front);</span><br><span class="line">    Q-&gt;front = Q-&gt;rear;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueueEmpty"><a href="#QueueEmpty" class="headerlink" title="QueueEmpty"></a>QueueEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">QueueEmpty</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Q.front == Q.rear &amp;&amp; Q.rear == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueueLength"><a href="#QueueLength" class="headerlink" title="QueueLength"></a>QueueLength</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  QueuePtr temp = Q.front;</span><br><span class="line">  <span class="keyword">while</span> (temp != Q.rear) &#123;</span><br><span class="line">    temp = temp-&gt;next;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GetHead"><a href="#GetHead" class="headerlink" title="GetHead"></a>GetHead</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetHead</span><span class="params">(LinkQueue Q, QElemType* e)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (QueueEmpty(Q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队列为空!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = Q.front-&gt;data;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnQueue"><a href="#EnQueue" class="headerlink" title="EnQueue"></a>EnQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue* Q, QElemType e)</span>&#123;</span><br><span class="line">  QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">  <span class="keyword">if</span> (!p)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;入队存储分配失败!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">  &#125;</span><br><span class="line">  p-&gt;data = e; </span><br><span class="line">  p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">  Q-&gt;rear-&gt;next = p;<span class="comment">//原来的指向空指针改为指向新入队的结点</span></span><br><span class="line">  Q-&gt;rear = p;<span class="comment">//p为新的队尾</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DeQueue"><a href="#DeQueue" class="headerlink" title="DeQueue"></a>DeQueue</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span>&#123;</span><br><span class="line">  <span class="comment">//若队列不空，则删除Q的队头元素，用e返回其值，并返回1</span></span><br><span class="line">  <span class="comment">//返回失败则为ERROR</span></span><br><span class="line">  <span class="keyword">if</span> (QueueEmpty(*Q))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队列为空！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  QueuePtr p = Q-&gt;front-&gt;next;<span class="comment">//赋值队头</span></span><br><span class="line">  *e = p-&gt;data;</span><br><span class="line">  Q-&gt;front-&gt;next = p-&gt;next;<span class="comment">//队头改变</span></span><br><span class="line">  <span class="keyword">if</span> (Q-&gt;rear == p)Q-&gt;rear = Q-&gt;front;<span class="comment">//队列空了</span></span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueueTraverse"><a href="#QueueTraverse" class="headerlink" title="QueueTraverse"></a>QueueTraverse</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">QueueTraverse</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (QueueEmpty(Q)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;队列为空！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始遍历队列元素: &quot;</span>);</span><br><span class="line">  QueuePtr temp = Q.front;</span><br><span class="line">  temp = temp-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">    temp = temp-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历结束！\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  LinkQueue MyQueue;</span><br><span class="line">  QElemType e;</span><br><span class="line">  <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">  InitQueue(&amp;MyQueue);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入需要入队的元素个数: &quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入%d个元素入队\n&quot;</span>, size);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    EnQueue(&amp;MyQueue, e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已入队%d个元素\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  QueueTraverse(MyQueue);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;队列有%d个元素\n&quot;</span>, QueueLength(MyQueue));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要出队几个元素: &quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="keyword">if</span> (size &gt; QueueLength(MyQueue)) &#123;</span><br><span class="line">    size = QueueLength(MyQueue);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    DeQueue(&amp;MyQueue,&amp;e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d次, 出队元素为:%d \n&quot;</span>,i + <span class="number">1</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;单链队列&quot;&gt;&lt;a href=&quot;#单链队列&quot; class=&quot;head</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="单链队列" scheme="https://myblog.luojunda123.top/tags/%E5%8D%95%E9%93%BE%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>顺序栈</title>
    <link href="https://myblog.luojunda123.top/undefined/dbb1f3e2.html"/>
    <id>https://myblog.luojunda123.top/undefined/dbb1f3e2.html</id>
    <published>2023-10-08T23:05:18.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>栈，是限定仅在表尾进行插入或删除的线性表，其表尾称为栈顶，表头称为栈底。栈具有后进先出的特点，即先入栈的元素后出栈。</p><p>栈有两种存储表示方法：</p><ul><li>顺序栈 — 即栈的顺序存储结构，是用一组地址连续的存储单元依次存放自栈底到栈顶的元素。</li><li>链栈 — 即栈的链式表示，其实现方法与单链表类似，这里不实现。</li></ul><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_INIT_SIZE 10  <span class="comment">//存储空间初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKINCREMENT  10  <span class="comment">//存储空间分配增量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  SElemType* base;<span class="comment">//在栈构造之前和销毁之后，base值为NULL</span></span><br><span class="line">  SElemType* top; <span class="comment">//栈顶指针</span></span><br><span class="line">  <span class="type">int</span> stacksize;<span class="comment">//当前已分配的存储空间，以元素为单位</span></span><br><span class="line">&#125;Sqstack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造一个空栈S</span></span><br><span class="line">Status <span class="title function_">InitStack</span><span class="params">(Sqstack *S)</span>;</span><br><span class="line"><span class="comment">//若栈为空栈则返回1，否则返回0</span></span><br><span class="line">Status <span class="title function_">StackEmpty</span><span class="params">(Sqstack S)</span>;</span><br><span class="line"><span class="comment">//若栈不空，则用e返回栈顶元素，并返回1，否则返回0</span></span><br><span class="line">Status <span class="title function_">GetTop</span><span class="params">(Sqstack S, SElemType *e)</span>;</span><br><span class="line"><span class="comment">//将元素e插入到栈中作为栈顶元素</span></span><br><span class="line">Status <span class="title function_">Push</span><span class="params">(Sqstack *S, SElemType e)</span>;</span><br><span class="line"><span class="comment">//若栈不空，则删除S的栈顶元素，并返回其值</span></span><br><span class="line">Status <span class="title function_">Pop</span><span class="params">(Sqstack *S, SElemType *e)</span>;</span><br><span class="line"><span class="comment">//栈不空，则返回栈长</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">StackLength</span><span class="params">(Sqstack S)</span>;</span><br><span class="line"><span class="comment">//逐一访问栈的元素直到栈空</span></span><br><span class="line">Status <span class="title function_">StackTraverse</span><span class="params">(Sqstack S)</span>;</span><br></pre></td></tr></table></figure><h3 id="相关方法实现"><a href="#相关方法实现" class="headerlink" title="相关方法实现"></a>相关方法实现</h3><h4 id="InitStack"><a href="#InitStack" class="headerlink" title="InitStack"></a>InitStack</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitStack</span><span class="params">(Sqstack *S)</span>&#123;</span><br><span class="line">  S-&gt;base = (SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!S-&gt;base)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">  &#125;</span><br><span class="line">  S-&gt;top = S-&gt;base;</span><br><span class="line">  S-&gt;stacksize = STACK_INIT_SIZE;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//InitStack</span></span><br></pre></td></tr></table></figure><h4 id="StackEmpty"><a href="#StackEmpty" class="headerlink" title="StackEmpty"></a>StackEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">StackEmpty</span><span class="params">(Sqstack S)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> S.top == S.base;</span><br><span class="line">&#125;<span class="comment">//StackEmpty</span></span><br></pre></td></tr></table></figure><h4 id="GetTop"><a href="#GetTop" class="headerlink" title="GetTop"></a>GetTop</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetTop</span><span class="params">(Sqstack S, SElemType *e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (StackEmpty(S))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈空！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = *(S.top);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//GetTop</span></span><br></pre></td></tr></table></figure><h4 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Push</span><span class="params">(Sqstack *S, SElemType e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (S-&gt;top - S-&gt;base &gt;= S-&gt;stacksize) &#123;<span class="comment">//栈满，追加存储空间</span></span><br><span class="line">    <span class="type">int</span> new_size = S-&gt;stacksize + STACKINCREMENT;<span class="comment">//避免算术溢出</span></span><br><span class="line">    SElemType* new_base = (SElemType*)<span class="built_in">realloc</span>(S-&gt;base, new_size * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">    <span class="keyword">if</span> (!new_base)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;追加存储分配失败！\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;base = new_base;</span><br><span class="line">    S-&gt;top = S-&gt;base + S-&gt;stacksize - <span class="number">1</span>;</span><br><span class="line">    S-&gt;stacksize += STACKINCREMENT;</span><br><span class="line">  &#125;</span><br><span class="line">  *++(S-&gt;top) = e; <span class="comment">//第一次入栈的时候，先给top指针++再赋值</span></span><br><span class="line">  <span class="comment">//即base指针所指的地址是没有值的</span></span><br><span class="line">                 <span class="comment">//不然遍历栈的时候由于top==base的时候跳出循环</span></span><br><span class="line">                <span class="comment">//base指针的值就会丢失且top指针可能会指向一个空地址</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//Push</span></span><br></pre></td></tr></table></figure><h4 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Pop</span><span class="params">(Sqstack *S, SElemType *e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (StackEmpty(*S))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈空！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = *S-&gt;top--;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//Pop</span></span><br></pre></td></tr></table></figure><h4 id="StackLength"><a href="#StackLength" class="headerlink" title="StackLength"></a>StackLength</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">StackLength</span><span class="params">(Sqstack S)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (StackEmpty(S))&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;栈空！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">int</span>)(S.top - S.base);</span><br><span class="line">&#125;<span class="comment">//StackLength</span></span><br></pre></td></tr></table></figure><h4 id="StackTraverse"><a href="#StackTraverse" class="headerlink" title="StackTraverse"></a>StackTraverse</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">StackTraverse</span><span class="params">(Sqstack S)</span> &#123;<span class="comment">//逐一提取栈的元素直到栈空</span></span><br><span class="line">  SElemType e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历顺序栈: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (!StackEmpty(S))&#123;</span><br><span class="line">    Pop(&amp;S,&amp;e);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历结束\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//StackTraverse</span></span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  SElemType e;</span><br><span class="line">  <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  Sqstack MyStack;</span><br><span class="line">  InitStack(&amp;MyStack);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入初始栈长!\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入%d个元素入栈!\n&quot;</span>, size);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    Push(&amp;MyStack, e);</span><br><span class="line">  &#125;</span><br><span class="line">  StackTraverse(MyStack);</span><br><span class="line">  GetTop(MyStack, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;栈顶元素是%d\n&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;再输入一个数入栈！\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">  Push(&amp;MyStack, e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;此时栈长为%d\n&quot;</span>, StackLength(MyStack));</span><br><span class="line">  StackTraverse(MyStack);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;顺序栈&quot;&gt;&lt;a href=&quot;#顺序栈&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="顺序栈" scheme="https://myblog.luojunda123.top/tags/%E9%A1%BA%E5%BA%8F%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>双向链表</title>
    <link href="https://myblog.luojunda123.top/undefined/62b7b468.html"/>
    <id>https://myblog.luojunda123.top/undefined/62b7b468.html</id>
    <published>2023-10-02T17:13:09.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>为克服单链表、循环链表的单向性，即如果要查询结点的直接前驱需要从表头指针出发，双向链表中的结点具有两个指针域：其一指向直接后继，另一指向直接前驱</p><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双向链表的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ElemType data;<span class="comment">//数据域</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">prior</span>;</span><span class="comment">//前驱指针域</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">next</span>;</span><span class="comment">//后继指针域</span></span><br><span class="line">&#125;DuLNode, * DuLinkList;</span><br></pre></td></tr></table></figure><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><h4 id="手动输入n个元素的值，创建一个双向链表L"><a href="#手动输入n个元素的值，创建一个双向链表L" class="headerlink" title="手动输入n个元素的值，创建一个双向链表L"></a>手动输入n个元素的值，创建一个双向链表L</h4><p>注意是用返回值接收链表L<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">DuLinkList <span class="title function_">CreateList_L</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">  DuLNode* end, * p, * L;</span><br><span class="line">  L = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));<span class="comment">//L是头结点</span></span><br><span class="line">  <span class="keyword">if</span> (L == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  end = L;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    p = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));<span class="comment">//p是普通结点</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">    end-&gt;next = p;</span><br><span class="line">    <span class="comment">//双向</span></span><br><span class="line">    p-&gt;prior = end;</span><br><span class="line">    end = p;<span class="comment">//这个end很重要,保留这个循环产生的p结点,在下一个循环中使用</span></span><br><span class="line">  &#125;</span><br><span class="line">  end-&gt;next = L;<span class="comment">//end是尾结点，指针域是头结点，形成循环链表</span></span><br><span class="line">  L-&gt;prior = end;<span class="comment">//头结点的前驱再指向尾结点，形成双向循环链表</span></span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="返回链表L的第i个元素"><a href="#返回链表L的第i个元素" class="headerlink" title="返回链表L的第i个元素"></a>返回链表L的第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetElem_L</span><span class="params">(DuLinkList* L, <span class="type">int</span> i,ElemType* e)</span>&#123;</span><br><span class="line">  <span class="comment">//L是带头结点的单链表的头指针,若第i个元素存在则赋值给e并返回</span></span><br><span class="line">  DuLinkList p;</span><br><span class="line">  p = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">  p = (*L)-&gt;next;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (p &amp;&amp; j &lt; i)&#123;</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!p || j &gt; i || p == *L)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素不存在或该结点是头结点!\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = p-&gt;data;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在链表L的第i个位置插入元素e"><a href="#在链表L的第i个位置插入元素e" class="headerlink" title="在链表L的第i个位置插入元素e"></a>在链表L的第i个位置插入元素e</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_DuL</span><span class="params">(DuLinkList* L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">  DuLinkList p;</span><br><span class="line">  p = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">  p = *L; <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;<span class="comment">//寻找第i个结点</span></span><br><span class="line">    p = p-&gt;next; ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!p || j &gt; i || p == *L) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素不存在或该结点是头结点!\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  DuLinkList s;</span><br><span class="line">  s = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));<span class="comment">//生成一个新节点并插入L中</span></span><br><span class="line">  <span class="keyword">if</span> (s != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    <span class="comment">//双向</span></span><br><span class="line">    s-&gt;prior = p-&gt;prior;</span><br><span class="line">    p-&gt;prior-&gt;next = s;</span><br><span class="line">    s-&gt;next = p;</span><br><span class="line">    p-&gt;prior = s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="删除链表L的第i个元素"><a href="#删除链表L的第i个元素" class="headerlink" title="删除链表L的第i个元素"></a>删除链表L的第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_DuL</span><span class="params">(DuLinkList *L, <span class="type">int</span> i, ElemType* e)</span>&#123;</span><br><span class="line">  <span class="comment">//将被删除的第i个元素赋值给e并返回</span></span><br><span class="line">  DuLinkList p;</span><br><span class="line">  p = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">  p = *L; <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>) &#123;<span class="comment">//寻找第i个结点，并令p指向其前驱</span></span><br><span class="line">    p = p-&gt;next; ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(p-&gt;next) || j &gt; i - <span class="number">1</span> || p-&gt;next == *L) &#123;<span class="comment">//删除位置不合理</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的位置不合理!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  p = p-&gt;next;<span class="comment">//让p指向被删除元素的位置，而不是其前驱</span></span><br><span class="line">  *e = p-&gt;data;<span class="comment">//赋值被删除元素</span></span><br><span class="line">  p-&gt;prior-&gt;next = p-&gt;next; <span class="comment">//被删除的结点 其前驱的后继 指向 其后继</span></span><br><span class="line">  p-&gt;next-&gt;prior = p-&gt;prior;<span class="comment">//被删除的结点 其后继的前驱 指向 其前驱</span></span><br><span class="line">  <span class="built_in">free</span>(p); <span class="comment">//释放被删除的结点</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="链表排序函数"><a href="#链表排序函数" class="headerlink" title="链表排序函数"></a>链表排序函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">SelectSort</span><span class="params">(DuLinkList *L)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始对链表进行冒泡排序!\n&quot;</span>);</span><br><span class="line">  DuLinkList p, q, small;</span><br><span class="line">  DuLNode* head = *L;</span><br><span class="line">  ElemType temp, temp1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//冒泡排序的变形</span></span><br><span class="line">  <span class="keyword">for</span> (p = (*L)-&gt;next; p-&gt;next != head; p = p-&gt;next) &#123;</span><br><span class="line">    <span class="comment">//每次循环都找出一个最小值，将最小值交换到第一位，然后将指针向后移动一位</span></span><br><span class="line">    small = p;</span><br><span class="line">    <span class="keyword">for</span> (q = p-&gt;next; q != head; q = q-&gt;next) &#123; <span class="comment">/*由前向后遍历，找出最小的节点*/</span></span><br><span class="line">      <span class="keyword">if</span> (q-&gt;data &lt; small-&gt;data) small = q;<span class="comment">//小于就是从小到大排序，大于就是从大到小排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (small != p) &#123;<span class="comment">//将较小或最小的结点的数据域与当前循环的起始结点交换</span></span><br><span class="line">      temp = p-&gt;data;</span><br><span class="line">      p-&gt;data = small-&gt;data;</span><br><span class="line">      small-&gt;data = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="顺序遍历链表的所有元素"><a href="#顺序遍历链表的所有元素" class="headerlink" title="顺序遍历链表的所有元素"></a>顺序遍历链表的所有元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ListTraverse</span><span class="params">(DuLinkList L)</span></span><br><span class="line">&#123;</span><br><span class="line">  DuLNode* p = L;<span class="comment">//储存链表头指针</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历双向链表的全部元素: &quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (L-&gt;next != p)&#123; <span class="comment">//注意循环结束条件是下一个结点是头结点</span></span><br><span class="line">    L = L-&gt;next;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//上述函数的测试</span></span><br><span class="line">&#123;</span><br><span class="line">  DuLinkList MyList;</span><br><span class="line">  <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  ElemType e = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入链表的大小: &quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;根据大小按顺位序对双向链表赋值\n&quot;</span>);</span><br><span class="line">  MyList = CreateList_L(size);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要返回双向链表第几位的元素：&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  GetElem_L(&amp;MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;链表第%d位的元素是:%d\n&quot;</span>, pos, e);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要向双向链表第几位插入元素：&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要插入的元素是：&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">  ListInsert_DuL(&amp;MyList, pos, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要删除双向链表的第几位元素: &quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  ListDelete_DuL(&amp;MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;被删除的元素是:%d\n&quot;</span>, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  SelectSort(&amp;MyList);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;header</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="双向链表" scheme="https://myblog.luojunda123.top/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>单链表&amp;循环链表</title>
    <link href="https://myblog.luojunda123.top/undefined/c5e230a.html"/>
    <id>https://myblog.luojunda123.top/undefined/c5e230a.html</id>
    <published>2023-10-02T14:40:09.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>链表，是线性表的链式存储结构，相比于顺序表的结构特点来说，即逻辑关系上相邻的两个元素在物理位置上也相邻，是用一组（地址）任意的存储单元，如C语言中的结构体，来存储线性表的数据元素。<u>这组存储单元可以是连续的，也可以是不连续的。</u></p><ul><li>连续的存储单元是用数组来实现链表结构的，这种数组描述的链表又名<strong>静态链表</strong>（这里不实现）</li><li>不连续的存储单元使用指针来实现链表结构的，即存储单元之间用指针相连。根据相连的情况，分为<strong>单链表</strong>、<strong>循环链表</strong>和<strong>双向链表</strong>。</li></ul><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表、循环链表的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ElemType data;<span class="comment">//数据域</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><h4 id="逆位序手动输入n个元素的值，建立带表头结点的单链表L"><a href="#逆位序手动输入n个元素的值，建立带表头结点的单链表L" class="headerlink" title="逆位序手动输入n个元素的值，建立带表头结点的单链表L"></a>逆位序手动输入n个元素的值，建立带表头结点的单链表L</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_L</span><span class="params">(LinkList* L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">  *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  (*L)-&gt;next = <span class="literal">NULL</span>; <span class="comment">//先建立一个带头结点的单链表，其中L是指向结构体指针的指针，加取值符变成结构体指针</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始输入元素\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">    LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data); <span class="comment">//输入元素值</span></span><br><span class="line">    p-&gt;next = (*L)-&gt;next; <span class="comment">//插入到表头</span></span><br><span class="line">    (*L)-&gt;next = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经输入%d个元素\n&quot;</span>, n - i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="顺位序手动输入n个元素的值，建立单链表L"><a href="#顺位序手动输入n个元素的值，建立单链表L" class="headerlink" title="顺位序手动输入n个元素的值，建立单链表L"></a>顺位序手动输入n个元素的值，建立单链表L</h4><p>注意是用返回值来接受参数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">CreateList_L1</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">  LNode* end, * p, * L;</span><br><span class="line">  L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//L是头结点</span></span><br><span class="line">  end = L;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//p是普通结点</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">    end-&gt;next = p;</span><br><span class="line">    end = p;</span><br><span class="line">  &#125;</span><br><span class="line">  end-&gt;next = <span class="literal">NULL</span>;<span class="comment">//end是尾结点，指针域是NULL</span></span><br><span class="line">  <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="逆位序手动输入n个元素的值，建立带表头结点的循环链表L"><a href="#逆位序手动输入n个元素的值，建立带表头结点的循环链表L" class="headerlink" title="逆位序手动输入n个元素的值，建立带表头结点的循环链表L"></a>逆位序手动输入n个元素的值，建立带表头结点的循环链表L</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateCirList_L</span><span class="params">(LinkList* L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">  *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//这是尾结点</span></span><br><span class="line">  q-&gt;next = *L;<span class="comment">//尾结点的指针指向头结点</span></span><br><span class="line">  <span class="comment">//初始化的时候头结点的指针也要指向尾结点</span></span><br><span class="line">  (*L)-&gt;next = q; <span class="comment">//先建立一个带头结点的单链表，其中L是指向结构体指针的指针，加取值符变成结构体指针</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始输入元素\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">    LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data); <span class="comment">//输入元素值</span></span><br><span class="line">    p-&gt;next = (*L)-&gt;next; <span class="comment">//插入到表头</span></span><br><span class="line">    (*L)-&gt;next = p;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已经输入%d个元素\n&quot;</span>, n - i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="返回链表L的第i个元素"><a href="#返回链表L的第i个元素" class="headerlink" title="返回链表L的第i个元素"></a>返回链表L的第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetElem_L</span><span class="params">(LinkList L, <span class="type">int</span> i,ElemType* e)</span>&#123; <span class="comment">//值传递L</span></span><br><span class="line">  <span class="comment">//L是带头结点的单链表的头指针,若第i个元素存在则赋值给e并返回OK，否则返回ERROR</span></span><br><span class="line">  LinkList p = L-&gt;next; <span class="comment">//初始化，p指向L的第一个结点</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">1</span>; <span class="comment">//计数器</span></span><br><span class="line">  <span class="keyword">while</span> (p &amp;&amp; j &lt; i) &#123;<span class="comment">//顺指针向后查找，直到p指向第i个元素或p为空</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!p || j &gt; i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第%d个元素不存在!\n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = p-&gt;data; <span class="comment">//取第i个元素</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在链表L的第i个位置插入元素e"><a href="#在链表L的第i个位置插入元素e" class="headerlink" title="在链表L的第i个位置插入元素e"></a>在链表L的第i个位置插入元素e</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_L</span><span class="params">(LinkList *L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">  LinkList p = *L;</span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (p &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;<span class="comment">//寻找第i-1个结点</span></span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">    ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!p || j &gt; i - <span class="number">1</span>)&#123;<span class="comment">//i小于1或者i大于表长+1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ERROR!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>(ERROR);</span><br><span class="line">  &#125;</span><br><span class="line">  LinkList s = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//生成一个新节点并插入L中</span></span><br><span class="line">  <span class="keyword">if</span> (s != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="删除链表L的第i个元素"><a href="#删除链表L的第i个元素" class="headerlink" title="删除链表L的第i个元素"></a>删除链表L的第i个元素</h4><p>将被删除的第i个元素赋值给e并由e返回值<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_L</span><span class="params">(LinkList *L, <span class="type">int</span> i,ElemType *e)</span>&#123;</span><br><span class="line">  LinkList p = *L; <span class="comment">//L是指向结构体指针的指针，需要取值符*</span></span><br><span class="line">  <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i - <span class="number">1</span>)&#123;<span class="comment">//寻找第i个结点，并令p指向其前驱</span></span><br><span class="line">    p = p-&gt;next; ++j;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(p-&gt;next) || j &gt; i - <span class="number">1</span>)&#123;<span class="comment">//删除位置不合理</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ERROR!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">  &#125;</span><br><span class="line">  LinkList q = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">  q = p-&gt;next; p-&gt;next = q-&gt;next;<span class="comment">//删除原本p-&gt;next结点</span></span><br><span class="line">  *e = q-&gt;data; <span class="comment">//释放结点</span></span><br><span class="line">  <span class="built_in">free</span>(q);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="链表遍历函数"><a href="#链表遍历函数" class="headerlink" title="链表遍历函数"></a>链表遍历函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListTraverse</span><span class="params">(LinkList L)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历整个链表：&quot;</span>);</span><br><span class="line">  LinkList p = L-&gt;next;</span><br><span class="line">  <span class="keyword">if</span> (p) &#123;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历结束\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="循环链表遍历函数"><a href="#循环链表遍历函数" class="headerlink" title="循环链表遍历函数"></a>循环链表遍历函数</h4><p>想要遍历的元素个数可以超过结点数，即实现循环<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">CirListTraverse</span><span class="params">(LinkList *L,<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始遍历：&quot;</span>);</span><br><span class="line">  LinkList p = (*L)-&gt;next;</span><br><span class="line">  <span class="keyword">if</span> (p) &#123;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p-&gt;next != *L) &#123; <span class="comment">//当没有遍历到尾结点的时候就打印输出元素</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        p = p-&gt;next; <span class="comment">//访问下一个结点</span></span><br><span class="line">        n--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123; <span class="comment">//访问到尾结点了，就把指针指向到头结点后面的结点</span></span><br><span class="line">        p = (*L)-&gt;next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;遍历结束\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//上述函数的测试</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//逆位序建立n个元素的循环链表</span></span><br><span class="line">  LinkList MyCirList;</span><br><span class="line">  <span class="type">int</span> m = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要建立几个元素的循环链表?（逆序输入！！！）\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">  CreateCirList_L(&amp;MyCirList, m);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要遍历几个元素？\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;count);</span><br><span class="line">  CirListTraverse(&amp;MyCirList,count);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//逆位序建立n个元素的单链线性表</span></span><br><span class="line">  LinkList MyList;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要建立几个元素的单链线性表?（逆序输入！！！）\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  CreateList_L(&amp;MyList, n);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//取链表第n个元素并打印</span></span><br><span class="line">  ElemType e;</span><br><span class="line">  <span class="type">int</span> pos;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要取链表的第几个元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  GetElem_L(MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;链表第%d个元素是：%d\n&quot;</span>, pos, e);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//往链表的第n个位置插入元素e</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要向链表的什么位置插入元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;插入元素是?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">  ListInsert_L(&amp;MyList, pos, e);</span><br><span class="line">  <span class="comment">//查看插入位置的元素是否更新?</span></span><br><span class="line">  GetElem_L(MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;链表第%d位的元素是：%d\n&quot;</span>, pos, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除链表的第n个位置的元素，并打印其值</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要删除链表什么位置的元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  ListDelete_L(&amp;MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;原本链表第%d个位置的元素%d被删除!\n&quot;</span>, pos, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="单链表" scheme="https://myblog.luojunda123.top/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    
    <category term="循环链表" scheme="https://myblog.luojunda123.top/tags/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>顺序表</title>
    <link href="https://myblog.luojunda123.top/undefined/f35acf61.html"/>
    <id>https://myblog.luojunda123.top/undefined/f35acf61.html</id>
    <published>2023-09-26T23:08:41.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>顺序表是线性表的顺序表示，指的是用一组地址连续的存储单元依次存储线性表的数据元素。在C语言中，通常使用动态分配的一维数组来表示这种顺序存储结构。</p><h3 id="声明与定义"><a href="#声明与定义" class="headerlink" title="声明与定义"></a>声明与定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 10 <span class="comment">//线性表存储空间的初始分配量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMMENT 10  <span class="comment">//线性表存储空间的分配增量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> Status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  ElemType* elem;    <span class="comment">//存储空间基地址</span></span><br><span class="line">  <span class="type">int</span> length;        <span class="comment">//长度</span></span><br><span class="line">  <span class="type">int</span> listsize;      <span class="comment">//当前分配的存储容量（以sizeof(ElemType)为单位）</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><h4 id="构造一个空顺序表L"><a href="#构造一个空顺序表L" class="headerlink" title="构造一个空顺序表L"></a>构造一个空顺序表L</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitList_Sq</span><span class="params">(SqList *L)</span> &#123;</span><br><span class="line">  L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">  <span class="keyword">if</span> (!L-&gt;elem) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length = <span class="number">0</span>; <span class="comment">//空表长度为0</span></span><br><span class="line">  L-&gt;listsize = LIST_INIT_SIZE; <span class="comment">//初始存储容量</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="向顺序表L手动输入n个元素"><a href="#向顺序表L手动输入n个元素" class="headerlink" title="向顺序表L手动输入n个元素"></a>向顺序表L手动输入n个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PushList_Sq</span><span class="params">(SqList *L, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;开始输入%d个数字\n&quot;</span>, n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)&#123;  <span class="comment">//当前存储空间已满，增加分配</span></span><br><span class="line">      ElemType* newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">      <span class="keyword">if</span> (!newbase)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">      &#125;</span><br><span class="line">      L-&gt;elem = newbase; <span class="comment">//新基址</span></span><br><span class="line">      L-&gt;listsize += LISTINCREMMENT; <span class="comment">//增加存储容量</span></span><br><span class="line">    &#125;</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;L-&gt;elem[i]);<span class="comment">//输入元素 把指针L转为地址</span></span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已输入%d个数字\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中第i个位置插入新的元素e"><a href="#在顺序表L中第i个位置插入新的元素e" class="headerlink" title="在顺序表L中第i个位置插入新的元素e"></a>在顺序表L中第i个位置插入新的元素e</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_Sq</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)&#123;<span class="comment">//检测i值是否合法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插入的位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)&#123;  <span class="comment">//当前存储空间已满，增加分配</span></span><br><span class="line">    ElemType* newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + LISTINCREMMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span> (!newbase)&#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>); <span class="comment">//存储分配失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;elem = newbase; <span class="comment">//新基址</span></span><br><span class="line">    L-&gt;listsize += LISTINCREMMENT; <span class="comment">//增加存储容量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ElemType* q = &amp;L-&gt;elem[i - <span class="number">1</span>];<span class="comment">//q为插入位置</span></span><br><span class="line">  <span class="keyword">for</span> (ElemType* p = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]); p &gt;= q; --p)&#123;<span class="comment">//插入位置以及之后的元素右移</span></span><br><span class="line">    *(p + <span class="number">1</span>) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length++;</span><br><span class="line">  *q = e;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中删除第i个元素e-并用e返回其值"><a href="#在顺序表L中删除第i个元素e-并用e返回其值" class="headerlink" title="在顺序表L中删除第i个元素e,并用e返回其值"></a>在顺序表L中删除第i个元素e,并用e返回其值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_Sq</span><span class="params">(SqList *L, <span class="type">int</span> i,ElemType *e)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)&#123; <span class="comment">//i值是否合法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ElemType* p = &amp;L-&gt;elem[i - <span class="number">1</span>];<span class="comment">//指针p指向被删除元素所在的地址</span></span><br><span class="line">  *e = *p;<span class="comment">//赋值删除元素</span></span><br><span class="line">  ElemType* q = &amp;(L-&gt;elem[L-&gt;length - <span class="number">1</span>]);<span class="comment">//指针q指向表尾元素所在的位置</span></span><br><span class="line">  <span class="keyword">for</span> (++p; p &lt;= q; ++p)&#123; <span class="comment">//被删除元素之后的元素左移</span></span><br><span class="line">    *(p - <span class="number">1</span>) = *p;</span><br><span class="line">  &#125;</span><br><span class="line">  L-&gt;length--;<span class="comment">//表长减1</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="返回顺序表的第i个元素"><a href="#返回顺序表的第i个元素" class="headerlink" title="返回顺序表的第i个元素"></a>返回顺序表的第i个元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i,ElemType* e)</span>&#123; <span class="comment">//不作修改，只传入表的副本就行</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;获取位置不合法！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *e = L.elem[i - <span class="number">1</span>]; <span class="comment">//注意是用参数接值</span></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="一个用于比较元素是否相等的函数，被用于表达式的布尔值判断"><a href="#一个用于比较元素是否相等的函数，被用于表达式的布尔值判断" class="headerlink" title="一个用于比较元素是否相等的函数，被用于表达式的布尔值判断"></a>一个用于比较元素是否相等的函数，被用于表达式的布尔值判断</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">compareElem</span><span class="params">(ElemType a, ElemType b)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">    <span class="keyword">return</span> OK; <span class="comment">//OK == 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="在顺序表L中查找第1个与值e满足函数指针compare的元素的位序-若找到，返回其在L中的位序；否则返回0"><a href="#在顺序表L中查找第1个与值e满足函数指针compare的元素的位序-若找到，返回其在L中的位序；否则返回0" class="headerlink" title="在顺序表L中查找第1个与值e满足函数指针compare的元素的位序,若找到，返回其在L中的位序；否则返回0"></a>在顺序表L中查找第1个与值e满足函数指针compare的元素的位序,若找到，返回其在L中的位序；否则返回0</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateElem_Sq</span><span class="params">(SqList L, ElemType e,Status (*compare) (ElemType,ElemType))</span>&#123;</span><br><span class="line">  <span class="type">int</span> i = <span class="number">1</span>; <span class="comment">//i的初值为第一个元素的位序</span></span><br><span class="line">  ElemType* p = L.elem; <span class="comment">//指针p指向第一个元素的存储位置</span></span><br><span class="line">  <span class="keyword">while</span> ((i &lt;= L.length) &amp;&amp; !(*compare)(*p++,e))++i;</span><br><span class="line">  <span class="keyword">if</span> (i &lt;= L.length)<span class="keyword">return</span> i;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc"><a href="#对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc" class="headerlink" title="对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc"></a>对元素按值非递减排序的两个顺序表La和Lb归并成新按值非递减排序的顺序表Lc</h4><p>时间复杂度为La和Lb两表长之和<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MergeList_Sq</span><span class="params">(SqList La, SqList Lb,SqList* Lc)</span> &#123;</span><br><span class="line">  <span class="comment">//La、Lb都是值传递，Lc是指针传递</span></span><br><span class="line">  ElemType* pa = La.elem, * pb = Lb.elem;</span><br><span class="line">  Lc-&gt;listsize = Lc-&gt;length = La.length + Lb.length;</span><br><span class="line">  ElemType* pc = Lc-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(Lc-&gt;listsize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">  <span class="keyword">if</span> (!Lc-&gt;elem)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;存储分配失败！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ElemType* pa_last = La.elem + La.length - <span class="number">1</span>;<span class="comment">//La表尾元素所在的位置</span></span><br><span class="line">  ElemType* pb_last = Lb.elem + Lb.length - <span class="number">1</span>;<span class="comment">//Lb表尾元素所在的位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pa &lt;= pa_last &amp;&amp; pb &lt;= pb_last)&#123;<span class="comment">//归并</span></span><br><span class="line">    <span class="keyword">if</span> (*pa &lt;= *pb)&#123;</span><br><span class="line">      *pc++ = *pa++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> *pc++ = *pb++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (pa &lt;= pa_last)*pc++ = *pa++; <span class="comment">//插入La的剩余元素</span></span><br><span class="line">  <span class="keyword">while</span> (pb &lt;= pb_last)*pc++ = *pb++; <span class="comment">//插入Lb的剩余元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h4 id="遍历顺序表L的所有元素"><a href="#遍历顺序表L的所有元素" class="headerlink" title="遍历顺序表L的所有元素"></a>遍历顺序表L的所有元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListTraverse</span><span class="params">(SqList L)</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该表的长度为%d\n&quot;</span>, L.length);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该表的元素有：\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.elem[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  SqList MyList;</span><br><span class="line">  InitList_Sq(&amp;MyList); <span class="comment">//传递SqList类型的指针 必须要&amp;号表示传递指针，如果用SqList *MyList构造，传递MyList相当于把指针副本传递给函数</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;创建顺序表MyList的存储空间大小为%d\n&quot;</span>,MyList.listsize);</span><br><span class="line">  <span class="comment">//非常容易混淆的点，传参需要修改参数时是需要用指针传递，</span></span><br><span class="line">  <span class="comment">//但不是指针的副本传递，</span></span><br><span class="line">  <span class="comment">//同样更不是把指针的指针传递过去</span></span><br><span class="line">  <span class="comment">//&amp; 是地址或变量转指针符号</span></span><br><span class="line">  <span class="comment">//* 是地址或指针取值符号</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//往MyList中放入n个数字并调用ListTraverse打印其长度和整个表的元素</span></span><br><span class="line">  <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表里放几个数字？&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">  PushList_Sq(&amp;MyList, num);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//往MyList的第几个位置插入什么数字最后打印</span></span><br><span class="line">  <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">  ElemType e;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表的第几个位置放元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要放置的元素是?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">  ListInsert_Sq(&amp;MyList, pos, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除MyList的第几个位置的元素，并打印被删除元素的值</span></span><br><span class="line">  pos = <span class="number">0</span>;</span><br><span class="line">  e = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要删除顺序表的第几个元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  ListDelete_Sq(&amp;MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;被删除的元素是：%d\n&quot;</span>, e);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//返回MyList的第几个位置的元素，并打印其值</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要返回顺序表的第几个元素?\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;pos);</span><br><span class="line">  GetElem(MyList, pos, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;第%d位的元素是：%d\n&quot;</span>, pos,e);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试LocateElem_Sq</span></span><br><span class="line">  Status(*compare)(ElemType, ElemType);</span><br><span class="line">  compare = compareElem;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;输入需要查找的元素\n&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;所找的元素%d,在表中的位置是第%d个\n&quot;</span>,e,LocateElem_Sq(MyList, e, compare));</span><br><span class="line"></span><br><span class="line">  <span class="comment">//新建另一个顺序表</span></span><br><span class="line">  SqList MyList2;</span><br><span class="line">  InitList_Sq(&amp;MyList2);</span><br><span class="line">  <span class="comment">//同第一步</span></span><br><span class="line">  num = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;新建一个顺序表\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;需要往顺序表里放几个数字？&quot;</span>);</span><br><span class="line">  scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line">  PushList_Sq(&amp;MyList2, num);</span><br><span class="line">  ListTraverse(MyList2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//再新建一个顺序表用于存储上面两个顺序表（必须非递减排序的元素）的归并</span></span><br><span class="line">  SqList MyNewList;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;这一步上面两个顺序表必须是非递减排序的，下面输出两顺序表的归并：\n&quot;</span>);</span><br><span class="line">  InitList_Sq(&amp;MyNewList);</span><br><span class="line">  MergeList_Sq(MyList, MyList2, &amp;MyNewList);</span><br><span class="line">  ListTraverse(MyList);</span><br><span class="line">  ListTraverse(MyList2);</span><br><span class="line">  ListTraverse(MyNewList);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;顺序表&quot;&gt;&lt;a href=&quot;#顺序表&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="数据结构" scheme="https://myblog.luojunda123.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="线性表" scheme="https://myblog.luojunda123.top/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://myblog.luojunda123.top/undefined/0.html"/>
    <id>https://myblog.luojunda123.top/undefined/0.html</id>
    <published>2023-09-17T21:14:00.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>Markdown是一种轻量级的标记语言，通过使用简单的标记符号，将纯文本转换成格式丰富的HTML文档。</p><h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><p> Markdown的语法相对简单直观，通过标签来实现块级元素和行内元素的效果。<em>注意，部分标记后面需要带空格，否则不生效</em></p><h3 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h3><p>是指占据一整行或多行的元素，常用于格式化文本的结构和布局，如段落、标题、列表等。</p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>通过1~6个”#”来控制标题字体的大小，并且字体自带加粗效果，如：</p><ul><li>标题「Markdown语法」用了2个#</li><li>标题「块级元素」用了3个#</li></ul><p>即#的数量越少，标题越大；越多，标题越小。</p><h4 id="引用文本"><a href="#引用文本" class="headerlink" title="引用文本"></a>引用文本</h4><p>在文本的前面加”&gt; “来实现，效果如下：</p><blockquote><p>这里是一个引用文本<br>~<br>~<br>~</p></blockquote><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>在文本前面加“1. ”来实现，在StackEdit编辑Markdown时换行时会自动补充序号，效果如下：</p><ol><li>起床</li><li>刷牙</li><li>洗脸</li></ol><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p> 在文本前面加”- “来实现，效果如下：</p><ul><li>吃饭</li><li>睡觉</li><li>玩游戏</li></ul><h4 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h4><p>在文本前面加”- [ ] “来实现，实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 学习C语言</span><br><span class="line">- [ ] 学习Python</span><br><span class="line">- [ ] 学习Java</span><br></pre></td></tr></table></figure><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>以3个反引号“`”开头，后面加代码语言类型，换行后写对应类型的代码，最后换行以3个反引号结尾，效果如下：</p><h5 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello Java!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> xxx <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">group</span> <span class="keyword">by</span> xxx <span class="keyword">having</span> <span class="built_in">count</span>(xxx) <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">order</span> <span class="keyword">by</span> xxx <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h4><p>在两个双”$”号之间用KaTeX语法写对应的数学公式，实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\frac&#123;\partial f&#125;&#123;\partial x&#125;=2\sqrt&#123;a&#125;x</span><br><span class="line">$$</span><br></pre></td></tr></table></figure></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><h5 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h5><p>以”|”号开头和结尾，表的字段名也用”|”号分隔</p><h5 id="设置属性的对齐方式"><a href="#设置属性的对齐方式" class="headerlink" title="设置属性的对齐方式"></a>设置属性的对齐方式</h5><p>类似表头的格式，把字段名换成两个”-“号，在两个”-“号的两边通过添加”:”号来设置属性的对齐格式：</p><ul><li>只填左边表示左对齐</li><li>只填右边表示右对齐</li><li>两边都填表示居中<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5>类似表头的格式，直接填相应的属性即可<br><br>综上，设置一个姓名左对齐、性别居中、爱好右对齐的表的效果如下：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:right">爱好</th></tr></thead><tbody><tr><td style="text-align:left">张三</td><td style="text-align:center">男</td><td style="text-align:right">跑步</td></tr><tr><td style="text-align:left">狗蛋儿</td><td style="text-align:center">未知</td><td style="text-align:right">打篮球</td></tr></tbody></table></div><p>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|爱好|</span><br><span class="line">|:--|:--:|--:|</span><br><span class="line">|张三|男|跑步|</span><br><span class="line">|狗蛋儿|未知|打篮球|</span><br></pre></td></tr></table></figure></p><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>在文本后面添加<code>[^脚注名]</code>，并在段落后面换行时将所添加的符号用”:”做解释，效果如下：</p><p>一键三连<sup><a href="#fn_三连" id="reffn_三连">三连</a></sup> 的效果我们都知道，是对up主最大支持和赞赏，因此三连多多，佳作连连。</p><p>脚注的内容会自动放在文章底部，<em>注意解释之后必须换行才能继续写下一个段落，否则会被视为脚注解释内容</em></p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>以三个”-“号作为一行，其中上面的一级、二级标题和脚注解释会自动生成分割线，效果如下：</p><hr><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="直接添加"><a href="#直接添加" class="headerlink" title="直接添加"></a>直接添加</h5><p>以<code>[1](2 3)</code>的形式出现，其中</p><ul><li>1填链接的文本</li><li>2填链接</li><li>3填鼠标放在链接上的提示文本</li></ul><p>效果如下：<br><a href="https://www.baidu.com" title="百度一下，你就知道">百度</a></p><p>实现如下：<br><code>[百度](https://www.baidu.com &quot;百度一下，你就知道&quot;)</code></p><h5 id="引用添加"><a href="#引用添加" class="headerlink" title="引用添加"></a>引用添加</h5><p>以”[1][2]”和”[2]: “的形式出现，其中</p><ul><li>1填链接的文本</li><li>第一个2填自定义的id名</li><li>第二个2的空格后面填链接 提示文本 <em>注意链接和提示文本存在空格</em></li></ul><p>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度][a]</span><br><span class="line">[a]: https://www.baidu.com “百度一下，你就知道”</span><br></pre></td></tr></table></figure></p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><p>类似链接的直接添加形式，在前面加“!”号，链接改为图片的图床链接或本地连接即可实现，效果如下：<br><img src="https://www.baidu.com/img/bd_logo1.png?where=super" alt="百度" title="百度搜索logo"><br>实现如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![百度](https://www.baidu.com/img/bd_logo1.png?where=super &quot;百度搜索logo&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>是指在一行内显示的元素，常用于格式化文本的样式，如加粗、斜体、链接等。</p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>文本两边加”*”号实现，效果如下：</p><p><em>斜体内容</em></p><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>文本两边加”**”实现，效果如下：</p><p><strong>被加粗的文字</strong></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>文本两边加反引号实现，效果如下：<br><code>print(&quot;Hello World!&quot;)</code></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>文本两边加“~~”实现，效果如下：</p><p><del>被删除的内容</del></p><h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>以”&amp;#x对应表情的字符编码;”出现在文本中，如<br><code>&amp;#x1F600;</code>表示一个笑脸&#x1F600;,其他表情的字符编码的<a href="https://www.emojiall.com/zh-hans/list">参考网站</a></p><h2 id="在Markdown中的Html代码"><a href="#在Markdown中的Html代码" class="headerlink" title="在Markdown中的Html代码"></a>在Markdown中的Html代码</h2><p>除了Markdown的基本语法，还可以使用HTML标签实现更多功能，但应当根据具体的Markdown解析器和使用场景来决定是否支持和如何解析HTML标签。</p><p>嵌入学习参考的Bilibili视频：</p><iframe src="//player.bilibili.com/player.html?aid=327623069&bvid=BV1JA411h7Gw&cid=171385214&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>实现代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=327623069&amp;bvid=BV1JA411h7Gw&amp;cid=171385214&amp;p=1&amp;autoplay=0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> &gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>注意src后面需要加上&amp;autoplay=0让视频不会自动播放，否则容易被吓一跳</em></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上内容基本是在参考学习的视频中学到的，包括视频嵌入代码的获取方式，文字描述枯燥，视频会更加直观易懂。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Markdown简介&quot;&gt;&lt;a href=&quot;#Markdown简介&quot; c</summary>
      
    
    
    
    <category term="Markdown" scheme="https://myblog.luojunda123.top/categories/Markdown/"/>
    
    
    <category term="起点" scheme="https://myblog.luojunda123.top/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇Hexo文章</title>
    <link href="https://myblog.luojunda123.top/undefined/324eb1bd.html"/>
    <id>https://myblog.luojunda123.top/undefined/324eb1bd.html</id>
    <published>2023-09-14T21:21:49.000Z</published>
    <updated>2023-10-08T16:09:22.122Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Written with <a href="https://stackedit.cn/">StackEdit中文版</a>.</p></blockquote><h2 id="初入Hexo博客框架"><a href="#初入Hexo博客框架" class="headerlink" title="初入Hexo博客框架"></a>初入Hexo博客框架</h2><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一个快速、简洁且强大的静态博客框架。</p><p>它基于Node.js开发，使用Markdown语法来书写文章，并通过预设的模板生成静态网页。</p><p>它具有快速编译、多主题支持、插件丰富等特点，适用于个人博客、技术文档等各种静态网站的构建。</p><p>通过Hexo，用户可以轻松地管理和发布自己的网站内容，并提供了丰富的插件和主题供用户选择和使用。</p><p>与其他博客框架相比，Hexo具有简单易用、灵活可扩展等优势，被广泛应用于静态网站的搭建和维护。</p><h3 id="Hexo的使用感想"><a href="#Hexo的使用感想" class="headerlink" title="Hexo的使用感想"></a>Hexo的使用感想</h3><p>Hexo是一款是一款非常友好的面向新手的博客框架，作为一个前端小白，可以轻松理解其配置文件的含义并建立了属于自己的博客网站。</p><h3 id="Butterfly主题简介"><a href="#Butterfly主题简介" class="headerlink" title="Butterfly主题简介"></a>Butterfly主题简介</h3><p>Butterfly主题是一种开源的、响应式的博客主题。</p><p>它提供了简洁、美观的界面和丰富的功能，适用于个人博客、技术博客等多种场景。</p><p>Butterfly主题支持多种语言、主题定制、代码高亮、文章分类、标签云等功能，同时也具有快速加载和良好的用户体验。</p><p>它是Hexo博客框架的一个非常受欢迎的主题之一。</p><h3 id="Butterfly的使用感想"><a href="#Butterfly的使用感想" class="headerlink" title="Butterfly的使用感想"></a>Butterfly的使用感想</h3><p>通过Butterfly主题，博主可以自定义、美化渲染自己博客的样式，并添加各式各样的功能插件。</p><h2 id="学习参考"><a href="#学习参考" class="headerlink" title="学习参考"></a>学习参考</h2><p>==安知鱼云== dalao的Hexo成套学习视频</p><iframe src="//player.bilibili.com/player.html?aid=556933559&bvid=BV13v4y1c75G&cid=800077849&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Written with &lt;a href=&quot;https://stackedit.cn/&quot;&gt;StackEdit中文版&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;初入Hexo博客框架&quot;&gt;&lt;a href=&quot;#初入Hexo博客框架&quot; c</summary>
      
    
    
    
    <category term="Hexo" scheme="https://myblog.luojunda123.top/categories/Hexo/"/>
    
    
    <category term="起点" scheme="https://myblog.luojunda123.top/tags/%E8%B5%B7%E7%82%B9/"/>
    
  </entry>
  
</feed>
